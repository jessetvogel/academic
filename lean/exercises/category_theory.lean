import tactic.basic

namespace category_theory

class category (C : Sort*) :=
  (hom     : Œ† (X Y : C), Sort*)
  (id      : Œ† (X : C), hom X X)
  (comp    : Œ† {X Y Z : C}, (hom Y Z) ‚Üí (hom X Y) ‚Üí (hom X Z))
  (comp_id : ‚àÄ {X Y : C} (f : hom X Y), comp f (id X) = f . obviously)
  (id_comp : ‚àÄ {X Y : C} (f : hom X Y), comp (id Y) f = f . obviously)
  (assoc   : ‚àÄ {W X Y Z : C} (f : hom W X) (g : hom X Y) (h : hom Y Z), comp (comp h g) f = comp h (comp g f) . obviously)

notation `ùüô`     := category.id   -- type as `\b1`
infixr ` ‚àò `:80  := category.comp -- type as `\circ`
infixr ` ‚ü∂ `:80 := category.hom  -- type as `\h`

section categories

variables {C : Sort*} [category C]
variables {X Y Z : C}
variables {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}

-- # Exercise
-- Prove that, for any object `X : C`, the identity morphism is the only morphism
-- such that `g ‚àò f = g` for all morphisms `g : Y ‚ü∂ X`.
example (f : X ‚ü∂ X) (hf : ‚àÄ {Y : C} (g : X ‚ü∂ Y), g ‚àò f = g) : f = ùüô X :=
begin
  sorry,
end

-- Some basic definitions in category theory
class mono (f : X ‚ü∂ Y) : Prop :=
  (cancel : ‚àÄ {Z : C} {g h : Z ‚ü∂ X} (w : f ‚àò g = f ‚àò h), g = h)

class epi (f : X ‚ü∂ Y) : Prop :=
  (cancel : ‚àÄ {Z : C} {g h : Y ‚ü∂ Z} (w : g ‚àò f = h ‚àò f), g = h)

class iso (f : X ‚ü∂ Y) : Prop :=
  (inv : ‚àÉ (g : Y ‚ü∂ X), g ‚àò f = ùüô X ‚àß f ‚àò g = ùüô Y)

class initial (X : C) : Prop :=
  (map : ‚àÄ (Y : C), ‚àÉ (f : X ‚ü∂ Y), ‚àÄ (g : X ‚ü∂ Y), f = g)

class terminal (Y : C) : Prop :=
  (map : ‚àÄ (X : C), ‚àÉ (f : X ‚ü∂ Y), ‚àÄ (g : X ‚ü∂ Y), f = g)

lemma initial_map (X Y : C) [initial X] : ‚àÉ (f : X ‚ü∂ Y), ‚àÄ (g : X ‚ü∂ Y), f = g := initial.map Y
lemma terminal_map (Y X : C) [terminal Y] : ‚àÉ (f : X ‚ü∂ Y), ‚àÄ (g : X ‚ü∂ Y), f = g := terminal.map X

-- # Exercise
-- Prove that the identity morphism on `X` is mono.
theorem id_mono : mono (ùüô X) :=
begin
  sorry,
end

-- # Exercise
-- Prove that the identity morphism on `X` is epi.
theorem id_epi : epi (ùüô X) :=
begin
  sorry,
end

-- # Exercise
-- Prove that the composition of two monos is mono.
theorem comp_mono (hf : mono f) (hg : mono g) : mono (g ‚àò f) :=
begin
  sorry,
end

-- # Exercise
-- Prove that the composition of two epis is epi.
theorem comp_epi (hf : epi f) (hg : epi g) : epi (g ‚àò f) :=
begin
  sorry,
end

-- # Exercise
-- Prove that the composition of two isomorphisms is an isomorphism.
theorem comp_iso (hf : iso f) (hg : iso g) : iso (g ‚àò f) :=
begin
  sorry,
end

-- # Exercise
-- Prove that initial objects are unique up to isomorphism.
theorem initial_unique (X Y : C) [hx : initial X] [hy : initial Y] : ‚àÉ (f : X ‚ü∂ Y), iso f :=
begin
  sorry,
end

-- # Exercise
-- Prove that terminal objects are unique up to isomorphism.
theorem terminal_unique (X Y : C) [hx : terminal X] [hy : terminal Y] : ‚àÉ (f : X ‚ü∂ Y), iso f :=
begin
  sorry,
end

end categories

section examples

class poset (Œ± : Sort*) :=
  (R : Œ± ‚Üí Œ± ‚Üí Prop)
  (refl  : ‚àÄ x, R x x)
  (asymm : ‚àÄ {x y}, R x y ‚Üí R y x ‚Üí x = y)
  (trans : ‚àÄ {x y z}, R y z ‚Üí R x y ‚Üí R x z)

infixr ` ‚â§ `:80  := poset.R

-- # Exercise
-- Show that the type `Prop` has the structure of a partially ordered set,
-- where the relation `R` is given by implication, that is, `R P Q := P ‚Üí Q`
instance poset_Prop : poset Prop := {
  R := Œª P Q, P ‚Üí Q,
  refl := sorry,
  asymm := sorry,
  trans := sorry,
}

-- # Exercise
-- Show that every partially ordered set is naturally a category, where `hom x y`
-- is given by the proposition `x ‚â§ y`
instance category_of_poset (C : Sort*) [poset C] : category C := {
  hom := Œª (x y : C), x ‚â§ y,
  id := sorry,
  comp := sorry,
  comp_id := sorry,
  id_comp := sorry,
  assoc := sorry,
}

-- # Exercise
-- Show that types with functions form a category
instance category_of_types : category Type := {
  hom := Œª Œ± Œ≤, Œ± ‚Üí Œ≤,
  id := sorry,
  comp := sorry,
  comp_id := sorry,
  id_comp := sorry,
  assoc := sorry,
}

end examples

section functors

class functor {C D : Sort*} [category C] [category D] (F : C ‚Üí D) :=
  (map : Œ† {X Y : C} (f : X ‚ü∂ Y), F X ‚ü∂ F Y)
  (id : ‚àÄ (X : C), map (ùüô X) = ùüô (F X))
  (comp : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (g ‚àò f) = map g ‚àò map f)

variables {C D : Sort*} [category C] [category D]
variables {F : C ‚Üí D} [functor F]

def functor_map (F : C ‚Üí D) [functor F] {X Y : C} (f : X ‚ü∂ Y) : F X ‚ü∂ F Y := functor.map f

class full (F : C ‚Üí D) [functor F] : Prop :=
  (intro : ‚àÄ {X Y : C} (g : F X ‚ü∂ F Y), ‚àÉ (f : X ‚ü∂ Y), functor.map f = g)

class faithful (F : C ‚Üí D) [functor F] : Prop :=
  (cancel : ‚àÄ {X Y : C} {f g : X ‚ü∂ Y} (h : functor_map F f = functor_map F g), f = g)

-- # Exercise
-- Prove that a full and faithful functor reflects initial objects.
example (F : C ‚Üí D) [functor F] [full F] [faithful F] {X : C} (hx : initial (F X)) : initial X :=
begin
  sorry,
end

-- # Exercise
-- Prove that a full and faithful functor reflects terminal objects.
example (F : C ‚Üí D) [functor F] [full F] [faithful F] {X : C} (hx : terminal (F X)) : terminal X :=
begin
  sorry,
end

-- # Exercise
-- Prove that a faithful functor reflects monos.
example (F : C ‚Üí D) [functor F] [faithful F] {X Y : C} {f : X ‚ü∂ Y} [hf : mono (functor_map F f)] : mono f :=
begin
  sorry,
end

-- # Exercise
-- Prove that a faithful functor reflects epis.
example (F : C ‚Üí D) [functor F] [faithful F] {X Y : C} {f : X ‚ü∂ Y} [hf : epi (functor_map F f)] : epi f :=
begin
  sorry,
end

-- # Exercise
-- Prove that if `F` is full and faithful, and `F X` is isomorphic to `F Y`, then `X` is isomorphic to `Y`
example (F : C ‚Üí D) [functor F] [full F] [faithful F] {X Y : C} {f : F X ‚ü∂ F Y} (hf : iso f) : ‚àÉ (g : X ‚ü∂ Y), iso g :=
begin
  sorry,
end

structure category_bundled :=
  (C : Sort*) (str : category C)

instance category_of_categories : category category_bundled := {
  hom := sorry,
  id := sorry,
  comp := sorry,
  comp_id := sorry,
  id_comp := sorry,
  assoc := sorry,
}

end functors

section natural_transformations

variables {C D : Sort*} [category C] [category D]

@[ext]
structure natural_transformation (F G : C ‚Üí D) [functor F] [functor G] :=
  (map     : Œ† (X : C), F X ‚ü∂ G X)
  (natural : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), map Y ‚àò functor_map F f = functor_map G f ‚àò map X)

structure functor_bundled (C D : Sort*) [category C] [category D] :=
  (F : C ‚Üí D) (str : functor F)

instance category_of_functors : category (functor_bundled C D) := {
  hom := sorry,
  id := sorry,
  comp := sorry,
  comp_id := sorry,
  id_comp := sorry,
  assoc := sorry,
}

end natural_transformations

end category_theory
